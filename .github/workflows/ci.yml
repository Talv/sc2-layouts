on:
  push:
    branches:
      - master
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#patterns-to-match-branches-and-tags
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

  # workflow_dispatch:
  #   inputs:
  #     publishPreRelease:
  #       description: 'Publish a pre-release ?'
  #       required: true
  #       type: choice
  #       options:
  #         - 'true'
  #         - 'false'
  #       default: 'true'
  #     publishToMarketPlace:
  #       description: 'Publish to VS Code Marketplace ?'
  #       required: true
  #       type: choice
  #       options:
  #         - 'true'
  #         - 'false'
  #       default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/checkout@v4
      with:
        repository: SC2Mapster/SC2GameData
        ref: master
        path: tmp/SC2GameData
        token: ${{ secrets.GH_PAT }}
    - uses: actions/checkout@v4
      with:
        repository: SC2Mapster/sc2layout-schema
        ref: master
        path: tmp/sc2-layout-schema
        token: ${{ secrets.GH_PAT }}
    - run: corepack enable
    - uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        cache: 'yarn'
    - name: Install NodeJS dependencies
      run: |
        yarn install --frozen-lockfile --cwd "${{ github.workspace }}"
        yarn install --frozen-lockfile --cwd "${{ github.workspace }}/client"
        yarn install --frozen-lockfile --cwd "${{ github.workspace }}/backend"
    - name: Test s2l service code
      run: |
        yarn run build
        yarn run test:server
      env:
        SC2LAYOUT_SCHEMA_DIR: ${{ github.workspace }}/tmp/sc2-layout-schema/sc2layout
    - name: Bundle sc2-data
      run: |
        yarn run build:sc2-data
      env:
        SC2GAMEDATA_DIR: ${{ github.workspace }}/tmp/SC2GameData
        SC2LAYOUTDATA_OUT_DIR: ${{ github.workspace }}/sc2-data
    - name: Prepare env vars for packaging
      run: |
        echo "EXT_NAME=$(cat package.json | jq -r '.name')" >> $GITHUB_ENV
        echo "EXT_VERSION_FULL=$(cat package.json | jq -r '.version | split(".")[0:3] | join(".")')" >> $GITHUB_ENV
        echo "EXT_VERSION_PART=$(cat package.json | jq -r '.version | split(".")[0:2] | join(".")')" >> $GITHUB_ENV
        echo "EXT_BUILD=$(date '+%Y%m%d%H' --utc)" >> $GITHUB_ENV
        mkdir -p package
    - name: Package pre-release VSIX
      run: |
        yarn run vsce package --yarn --pre-release --no-git-tag-version --no-update-package-json \
          -o "package/${{ env.EXT_NAME }}-v${{ env.EXT_VERSION_PART }}.${{ env.EXT_BUILD }}.vsix" "${{ env.EXT_VERSION_PART }}.${{ env.EXT_BUILD }}"
      if: ${{ startsWith(github.event.ref, 'refs/heads/master') }}
    - name: Package release VSIX
      run: |
        yarn run vsce package --yarn --no-git-tag-version --no-update-package-json \
          -o "package/${{ env.EXT_NAME }}-v${{ env.EXT_VERSION_FULL }}.vsix"
      if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    - name: Upload VSIX Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.EXT_NAME }}
        path: package
        if-no-files-found: error
        compression-level: 0

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - run: corepack enable
    - uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        cache: 'yarn'
    - name: Install NodeJS dependencies
      run: |
        yarn install --frozen-lockfile --cwd "${{ github.workspace }}"
    - uses: actions/download-artifact@v4
      with:
        path: package
        merge-multiple: true
    - name: Publish to VSC Marketplace
      if: ${{ startsWith(github.event.ref, 'refs/heads/master') || startsWith(github.event.ref, 'refs/tags/v') }}
      run: yarn run vsce publish --yarn --packagePath package/*.vsix
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
